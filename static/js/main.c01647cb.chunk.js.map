{"version":3,"sources":["index.js"],"names":["Counter","state","step","props","minutes","seconds","isRunning","end","length","stepLength","pauseTimer","setState","console","log","startTimer","this","timerID","setInterval","tick","onChangeLength","clearInterval","Math","round","componentWillUnmount","timerLineStyle","width","className","type","onClick","style","Component","a","b","ReactDOM","render","document","getElementById"],"mappings":"oQAIqBA,G,kNACjBC,MAAQ,CACJC,KAAM,EAAKC,MAAMD,KACjBE,QAAU,EAAKD,MAAMC,QACrBC,QAAS,EAAKF,MAAME,QACpBC,UAAW,EAAKH,MAAMG,UACtBC,KAAM,EACNC,OAAS,IACTC,WAAa,KAA4B,GAArB,EAAKN,MAAMC,QAAe,EAAKD,MAAME,U,EA2B7DK,WAAa,WACT,EAAKC,SAAS,CAACL,WAAW,IAC1BM,QAAQC,IAAI,U,EAEhBC,WAAa,WACTF,QAAQC,IAAI,WACZ,EAAKF,SAAS,CAACL,WAAW,K,kEA7BT,IAAD,OAEhBS,KAAKC,QAAUC,aACX,WACI,EAAKC,OACF,EAAKjB,MAAMK,YACV,EAAKa,iBACLP,QAAQC,IAAI,EAAKZ,MAAMO,WAK/BO,KAAKd,MAAMC,Q,6CAMfU,QAAQC,IAAI,OACZE,KAAKJ,SAAS,CAACH,OAAO,IACtBY,cAAcL,KAAKC,W,6BAYf,IAAD,OACAD,KAAKd,MAAMK,YAAcS,KAAKd,MAAMM,MACX,IAArBQ,KAAKd,MAAMI,SACVU,KAAKJ,UAAS,SAACV,GAEX,MAAM,CACFG,QAFYH,EAAMG,QAAU,EAG5BC,QAAS,OAIG,IAArBU,KAAKd,MAAMG,SAAeW,KAAKd,MAAMI,UAAUgB,KAAKC,MAAMP,KAAKd,MAAMC,KAAK,OACzEa,KAAKL,aACLK,KAAKJ,SAAS,CAACJ,KAAI,IACnBQ,KAAKQ,wBAGTR,KAAKJ,UAAS,SAACV,GAEX,MAAO,CACHI,QAFYJ,EAAMI,QAAUgB,KAAKC,MAAM,EAAKrB,MAAMC,KAAK,Y,uCAQnEa,KAAKJ,UAAS,SAAAV,GACV,MAAM,CACFO,OAASP,EAAMO,OAASP,EAAMQ,iB,+BAKhC,IAAD,EAC4BM,KAAKd,MAA/BG,EADF,EACEA,QAAQC,EADV,EACUA,QAAQG,EADlB,EACkBA,OAEjBgB,EAAiB,CACnBC,MAAK,UAAMjB,EAAN,MAET,OACI,yBAAKkB,UAAU,SACX,4BAAKtB,EAAL,IAAeC,GACf,4BAAQsB,KAAK,SAASC,QAASb,KAAKD,YAApC,SACA,4BAAQa,KAAK,SAASC,QAASb,KAAKL,YAApC,QACA,yBAAKgB,UAAU,aAAaG,MAAOL,S,GAxFdM,cA8F/BC,EAAI,CACN7B,KAAO,IACPE,QAAS,EACTC,QAAU,GACVC,WAAW,GAET0B,EAAI,CACN9B,KAAO,IACPE,QAAS,EACTC,QAAU,GACVC,WAAW,GAGf2B,IAASC,OACL,6BACA,kBAAClC,EAAY+B,GACT,kBAAC/B,EAAYgC,IACLG,SAASC,eAAe,W","file":"static/js/main.c01647cb.chunk.js","sourcesContent":["import React, {Component,useState} from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport \"./index.css\"\r\n\r\nexport default class Counter extends Component {\r\n    state = {\r\n        step :this.props.step,\r\n        minutes : this.props.minutes,\r\n        seconds: this.props.seconds,\r\n        isRunning: this.props.isRunning,\r\n        end : false,\r\n        length : 100,\r\n        stepLength : 100 / (this.props.minutes * 60 + this.props.seconds)\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.timerID = setInterval(\r\n            () => {\r\n                this.tick();\r\n                if(this.state.isRunning) {\r\n                    this.onChangeLength();\r\n                    console.log(this.state.length)\r\n                }\r\n                //console.log(this.state);\r\n            },\r\n\r\n            this.state.step\r\n        );\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"end\");\r\n        this.setState({length:0});\r\n        clearInterval(this.timerID)\r\n    }\r\n\r\n    pauseTimer = () => {\r\n        this.setState({isRunning: false});\r\n        console.log(\"pause\");\r\n    };\r\n    startTimer = () => {\r\n        console.log(\"running\");\r\n        this.setState({isRunning: true});\r\n    };\r\n\r\n    tick() {\r\n        if(this.state.isRunning && !this.state.end) {\r\n            if(this.state.seconds===0){\r\n                this.setState((state)=>{\r\n                    const minutes = state.minutes - 1;\r\n                    return{\r\n                        minutes : minutes,\r\n                        seconds: 60\r\n                    }\r\n                });\r\n            }\r\n            if(this.state.minutes===0 && this.state.seconds===Math.round(this.state.step/1000)){\r\n                this.pauseTimer();\r\n                this.setState({end:true});\r\n                this.componentWillUnmount();\r\n\r\n            }\r\n            this.setState((state) => {\r\n                const newTime = state.seconds - Math.round(this.state.step/1000);\r\n                return {\r\n                    seconds: newTime\r\n                }\r\n            })\r\n        }\r\n    };\r\n    onChangeLength(){\r\n        this.setState(state=>{\r\n            return{\r\n                length : state.length - state.stepLength\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {minutes,seconds,length} = this.state;\r\n\r\n        const timerLineStyle = {\r\n            width : `${length}%`\r\n        };\r\n        return (\r\n            <div className=\"timer\">\r\n                <h1>{minutes}:{seconds}</h1>\r\n                <button type=\"button\" onClick={this.startTimer}>Start</button>\r\n                <button type=\"button\" onClick={this.pauseTimer}>Stop</button>\r\n                <div className=\"timer-line\" style={timerLineStyle}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst a = {\r\n    step : 1000,\r\n    minutes: 1,\r\n    seconds : 11,\r\n    isRunning: true\r\n};\r\nconst b = {\r\n    step : 2000,\r\n    minutes: 3,\r\n    seconds : 50,\r\n    isRunning: true\r\n};\r\n\r\nReactDOM.render(\r\n    <div>\r\n    <Counter {...a}/>\r\n        <Counter {...b}/>\r\n        </div>, document.getElementById('root'));"],"sourceRoot":""}